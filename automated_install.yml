---
- name: 'Beginning Kubernetes Cluster build'
  hosts: localhost
  gather_facts: false
  become: false
  connection: local

  vars:
    ansible_python_interpreter: "/home/russest3/repos/aws-vpc-with-client-vpn-endpoint/workspace/.venv/bin/python3"

  vars_files:
    - common_vars.yml

  pre_tasks:
    - name: Check ssh key status
      stat:
        path: ~/.ssh/KubernetesKeyPair.pem
      register: _st

    - name: 'Check that ssh key is setup properly'
      ansible.builtin.assert:
        that:
          - _st.stat.exists
          - _st.stat.mode == '0400'
        fail_msg: 'SSH key is not setup properly.  Please run `make sshkey` and ensure permissions are 0400'

    - ansible.builtin.stat:
        path: "/var/tmp/.baseclusterinstall"
      register: _p

    - ansible.builtin.pause:
        prompt: "It appears the base Kubernetes cluster build has already run.  Do you wish to rerun? (Y/N)"
      when: _p.stat.exists == true
      register: rerun_input

    - ansible.builtin.set_fact:
        _rerun_input: "{{ rerun_input.user_input | lower }}"
      when: _p.stat.exists == true

    - ansible.builtin.set_fact:
        _rerun_input: 'y'
      when: _p.stat.exists == false

  tasks:

    - name: 'Getting node information...'
      ansible.builtin.include_tasks: 'include_tasks/get_node_info.yml'
    
    - name: 'Update /etc/hosts'
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {{ c1_cp1_private_ip }} c1-cp1.example.com c1-cp1
          {{ c1_node1_private_ip }} c1-node1.example.com c1-node1
          {{ c1_node2_private_ip }} c1-node2.example.com c1-node2
          {{ c1_node3_private_ip }} c1-node3.example.com c1-node3
      become: true

    - name: 'Get the IP of the Load Balancer'
      ansible.aws.elb_application_lb_info:
      register: _elb_results

    - name: 'Make local .kube directory'
      ansible.builtin.file:
        state: directory
        dest: ~/.kube

    - name: 'Get kubeconfig'
      ansible.builtin.fetch:
        src: '/home/ubuntu/.kube/config'
        dest: '~/.kube/config'
      delegate_to: c1-cp1
      become: false
    
- hosts: c1-cp1
  become: true
  gather_facts: true
  remote_user: ubuntu

  vars_files:
    - common_vars.yml

  environment:
    ANSIBLE_HOST_KEY_CHECKING: false

  vars:
    ansible_python_interpreter: '/usr/bin/python3'

  tasks:
    - name: 'Update /etc/hosts'
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {{ hostvars['localhost']['c1_cp1_private_ip'] }} c1-cp1.example.com c1-cp1
          {{ hostvars['localhost']['c1_node1_private_ip'] }} c1-node1.example.com c1-node1
          {{ hostvars['localhost']['c1_node2_private_ip'] }} c1-node2.example.com c1-node2
          {{ hostvars['localhost']['c1_node3_private_ip'] }} c1-node3.example.com c1-node3

    # - name: 'Apply the load balancer service'
    #   ansible.builtin.shell:
    #     cmd: |
    #       set -o pipefail
    #       kubectl apply -f lb.yml
    #     executable: /bin/bash
    #   changed_when: false
    #   become: false

    - name: 'Install the Kubernetes nginx Ingress Controller'
      ansible.builtin.shell:
      cmd: |
        set -o pipefail
        helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace
      executable: /bin/bash
      changed_when: false
      become: false

    - name: 'Output the join command to use in the following tasks to join nodes to the cluster'
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          kubeadm token create --print-join-command
        executable: /bin/bash
      changed_when: false

- name: 'Configure c1-node1'
  hosts: c1-node1
  gather_facts: true
  become: true
  remote_user: ubuntu

  vars_files:
    - common_vars.yml

  vars:
    ansible_python_interpreter: "/usr/bin/python3"

  tasks:
    - name: 'Update /etc/hosts'
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {{ hostvars['localhost']['c1_cp1_private_ip'] }} c1-cp1.example.com c1-cp1
          {{ hostvars['localhost']['c1_node1_private_ip'] }} c1-node1.example.com c1-node1
          {{ hostvars['localhost']['c1_node2_private_ip'] }} c1-node2.example.com c1-node2
          {{ hostvars['localhost']['c1_node3_private_ip'] }} c1-node3.example.com c1-node3

  post_tasks:
    - name: 'Get the join command'
      ansible.builtin.pause:
        prompt: "Please paste in the join command: "
      register: _join_command
      delegate_to: localhost

    - name: 'Run the join-command to join the node to the cluster'
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          {{ _join_command.user_input }}
        executable: /bin/bash
      changed_when: false

- name: 'Configure c1-node2'
  hosts: c1-node2
  gather_facts: true
  become: true
  remote_user: ubuntu

  vars_files:
    - common_vars.yml

  vars:
    ansible_python_interpreter: '/usr/bin/python3'

  tasks:
    - name: 'Update /etc/hosts'
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {{ hostvars['localhost']['c1_cp1_private_ip'] }} c1-cp1.example.com c1-cp1
          {{ hostvars['localhost']['c1_node1_private_ip'] }} c1-node1.example.com c1-node1
          {{ hostvars['localhost']['c1_node2_private_ip'] }} c1-node2.example.com c1-node2
          {{ hostvars['localhost']['c1_node3_private_ip'] }} c1-node3.example.com c1-node3

  post_tasks:
    - name: 'Get the join command'
      ansible.builtin.pause:
        prompt: "Please paste in the join command: "
      register: _join_command
      delegate_to: localhost

    - name: 'Run the join-command to join the node to the cluster'
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          {{ _join_command.user_input }}
        executable: /bin/bash
      changed_when: false

- name: 'Configure c1-node3'
  hosts: c1-node3
  gather_facts: true
  become: true
  remote_user: ubuntu

  vars_files:
    - common_vars.yml

  vars:
    ansible_python_interpreter: '/usr/bin/python3'

  tasks:
    - name: 'Update /etc/hosts'
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          {{ hostvars['localhost']['c1_cp1_private_ip'] }} c1-cp1.example.com c1-cp1
          {{ hostvars['localhost']['c1_node1_private_ip'] }} c1-node1.example.com c1-node1
          {{ hostvars['localhost']['c1_node2_private_ip'] }} c1-node2.example.com c1-node2
          {{ hostvars['localhost']['c1_node3_private_ip'] }} c1-node3.example.com c1-node3

  post_tasks:
    - name: 'Get the join command'
      ansible.builtin.pause:
        prompt: "Please paste in the join command: "
      register: _join_command
      delegate_to: localhost

    - name: 'Run the join-command to join the node to the cluster'
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          {{ _join_command.user_input }}
        executable: /bin/bash
      changed_when: false

# - name: 'Beginning installation of Kubernetes Dashboard'
#   hosts: c1-cp1
#   become: false
#   gather_facts: true
#   remote_user: ubuntu

#   vars_files:
#     - common_vars.yml

#   vars:
#     ansible_python_interpreter: '/usr/bin/python3'

#   environment:
#     ANSIBLE_HOST_KEY_CHECKING: false
  
#   pre_tasks:
#     - ansible.builtin.stat:
#         path: "/var/tmp/.kd"
#       register: _file_exist
  
#   roles:
#     - role: install-dashboard
#       when: _file_exist.stat.exists == false
  
#   post_tasks:
#     - ansible.builtin.copy:
#         content: "complete"
#         dest: "/var/tmp/.kd"
#         force: true
#       become: true

    # - ansible.builtin.pause:
    #     prompt: "Do you wish to install ElasticSearch into the Kubernetes cluster? (Y/N)"
    #   register: _install_elastic

# - name: 'Beginning installation of ElasticSearch'
#   hosts: c1-cp1
#   become: false
#   gather_facts: true
#   remote_user: ubuntu

#   vars_files:
#     - common_vars.yml

#   vars:
#     ansible_python_interpreter: '/usr/bin/python3'

#   roles:
#     - role: install-elastic
#       when: _install_elastic.user_input | lower == 'y'

#   post_tasks:
#     - ansible.builtin.copy:
#         content: "complete"
#         dest: "/home/{{ svc_acct_name }}/.elasticinstall"
#         owner: "{{ svc_acct_name }}"
#         group: "{{ svc_acct_name }}"
#         force: true
#       when: _install_elastic.user_input | lower == 'y'

#     - ansible.builtin.pause:
#         prompt: "Do you wish to install the ArgoCD CI/CD Pipeline into the Kubernetes cluster? (Y/N)"
#       register: _install_cicd

# - name: 'Beginning installation of CI/CD Pipeline'
#   hosts: c1-cp1
#   become: false
#   gather_facts: true
#   remote_user: ubuntu

#   vars:
#     ansible_python_interpreter: '/usr/bin/python3'

#   vars_files:
#     - common_vars.yml

#   roles:
#     - role: cicd-pipeline
#       when: _install_cicd.user_input | lower == 'y'

#   post_tasks:
#     - ansible.builtin.copy:
#         content: "complete"
#         dest: "/home/{{ svc_acct_name }}/.cicdpipelineinstall"
#         owner: "{{ svc_acct_name }}"
#         group: "{{ svc_acct_name }}"
#         force: true
#       when: _install_cicd.user_input | lower == 'y'

#     - ansible.builtin.pause:
#         prompt: "Do you wish to install Rancher Server into the Kubernetes cluster? (Y/N)"
#       register: _install_rancher

# - name: 'Beginning installation of Rancher server'
#   hosts: c1-cp1
#   become: false
#   gather_facts: true
#   remote_user: ubuntu

#   vars:
#     ansible_python_interpreter: '/usr/bin/python3'

#   vars_files:
#     - common_vars.yml

#   roles:
#     - role: rancher-server
#       when: _install_rancher.user_input | lower == 'y'

#   post_tasks:
#     - ansible.builtin.copy:
#         content: "complete"
#         dest: "/home/{{ svc_acct_name }}/.rancherinstall"
#         owner: "{{ svc_acct_name }}"
#         group: "{{ svc_acct_name }}"
#         force: true
#       when: _install_rancher.user_input | lower == 'y'
...
